/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos.hdi.ril.v1_0;

enum EccType {
    TYPE_CATEGORY = 0,
    TYPE_POLICE = 1,
    TYPE_AMBULANCE = 2,
    TYPE_FIRE = 4,
    TYPE_SEA = 8,
    TYPE_MOUNTAIN = 16,
};
enum SimpresentType {
    TYPE_NO_CARD = 0,
    TYPE_HAS_CARD = 1,
};
enum AbnormalServiceType {
    TYPE_ALL = 0,
    TYPE_ONLY_CS = 1,
};
enum RilErrType {
    NONE = 0,
    RIL_ERR_GENERIC_FAILURE = 1,
    RIL_ERR_INVALID_PARAMETER = 2,
    RIL_ERR_MEMORY_FULL = 3,
    RIL_ERR_CMD_SEND_FAILURE = 4,
    RIL_ERR_CMD_NO_CARRIER = 5,
    RIL_ERR_INVALID_RESPONSE = 6,
    RIL_ERR_REPEAT_STATUS = 7,
    RIL_ERR_NETWORK_SEARCHING = 8,
    RIL_ERR_NETWORK_SEARCHING_INTERRUPTED = 9,
    RIL_ERR_MODEM_DEVICE_CLOSE = 10,
    RIL_ERR_NO_SIMCARD_INSERTED = 11,
    RIL_ERR_NEED_PIN_CODE = 12,
    RIL_ERR_NEED_PUK_CODE = 13,
    RIL_ERR_NETWORK_SEARCH_TIMEOUT = 14,
    RIL_ERR_PINPUK_PASSWORD_NOCORRECT = 15,
    RIL_ERR_INVALID_MODEM_PARAMETER = 50,
    RIL_ERR_HDF_IPC_FAILURE = 300,
    RIL_ERR_NULL_POINT = 301,
    RIL_ERR_VENDOR_NOT_IMPLEMENT = 302
};
enum RilResponseTypes {
    RIL_RESPONSE_REQUEST = 0,
    RIL_RESPONSE_NOTICE = 1,
    RIL_RESPONSE_REQUEST_ACK = 2,
    RIL_RESPONSE_REQUEST_MUST_ACK = 3,
    RIL_RESPONSE_NOTICE_MUST_ACK = 4,
};
enum RilSrvStatus {
  RIL_NO_SRV_SERVICE = 0,
  RIL_RESTRICTED_SERVICE = 1,
  RIL_SERVICE_VALID = 2,
  RIL_REGIONAL_SERVICE = 3,
  RIL_ENERGY_SAVING_SERVICE = 4,
};
enum RilSrvDomain {
  RIL_NO_DOMAIN_SERVICE = 0,
  RIL_CS_SERVICE = 1,
  RIL_PS_SERVICE = 2,
  RIL_CS_PS_SERVICE = 3,
  RIL_CS_PS_SEARCHING = 4,
  RIL_CDMA_NOT_SUPPORT = 255,
};
enum RilRoamStatus {
  RIL_NO_ROAM = 0,
  RIL_ROAMING = 1,
  RIL_ROAM_UNKNOWN = 2,
};
enum RilSimLockStatus {
  RIL_SIM_CARD_UNLOCK = 0,
  RIL_SIM_CARD_LOCK = 1,
};
enum RilSysMode {
  RIL_NO_SYSMODE_SERVICE = 0,
  RIL_GSM_MODE = 1,
  RIL_CDMA_MODE = 2,
  RIL_WCDMA_MODE = 3,
  RIL_TDSCDMA_MODE = 4,
  RIL_WIMAX_MODE = 5,
  RIL_LTE_MODE = 6,
  RIL_LTE_CA_MODE = 7,
  RIL_NR_MODE = 8,
};
enum RilRadioTech {
  RADIO_TECHNOLOGY_INVALID = 65535,
  RADIO_TECHNOLOGY_UNKNOWN = 0,
  RADIO_TECHNOLOGY_GSM = 1,
  RADIO_TECHNOLOGY_1XRTT = 2,
  RADIO_TECHNOLOGY_WCDMA = 3,
  RADIO_TECHNOLOGY_HSPA = 4,
  RADIO_TECHNOLOGY_HSPAP = 5,
  RADIO_TECHNOLOGY_TD_SCDMA = 6,
  RADIO_TECHNOLOGY_EVDO = 7,
  RADIO_TECHNOLOGY_EHRPD = 8,
  RADIO_TECHNOLOGY_LTE = 9,
  RADIO_TECHNOLOGY_LTE_CA = 10,
  RADIO_TECHNOLOGY_IWLAN = 11,
  RADIO_TECHNOLOGY_NR = 12,
};
enum RilSimStatus {
  RIL_USIM_INVALID = 0,
  RIL_USIM_VALID = 1,
  RIL_USIM_CS_INVALID = 2,
  RIL_USIM_PS_INVALID = 3,
  RIL_USIM_CS_PS_INVALID = 4,
  RIL_ROM_SIM = 240,
  RIL_NO_USIM = 255,
};
enum RilRegStatus {
    NO_REG_MT_NO_SEARCH = 0,
    REG_MT_HOME = 1,
    NO_REG_MT_SEARCHING = 2,
    REG_MT_REJECTED = 3,
    REG_MT_UNKNOWN = 4,
    REG_MT_ROAMING = 5,
    REG_MT_EMERGENCY = 6,
};
enum RilCellConnectionStatus {
    RIL_SERVING_CELL_UNKNOWN = 0,
    RIL_SERVING_CELL_PRIMARY = 1,
    RIL_SERVING_CELL_SECONDARY = 2,
};
enum RilRegNotifyMode {
    REG_NOT_NOTIFY = 0,
    REG_NOTIFY_STAT_ONLY = 1,
    REG_NOTIFY_STAT_LAC_CELLID = 2,
};
enum RadioProtocolPhase {
    RADIO_PROTOCOL_PHASE_INITIAL,
    RADIO_PROTOCOL_PHASE_CHECK,
    RADIO_PROTOCOL_PHASE_UPDATE,
    RADIO_PROTOCOL_PHASE_NOTIFY,
    RADIO_PROTOCOL_PHASE_COMPLETE,
};
enum RadioProtocolStatus {
    RADIO_PROTOCOL_STATUS_NONE,
    RADIO_PROTOCOL_STATUS_SUCCESS,
    RADIO_PROTOCOL_STATUS_FAIL,
};
struct EmergencyCall {
    int index;
    int total;
    String eccNum;
    String mcc;
    enum EccType eccType;
    enum SimpresentType simpresent;
    enum AbnormalServiceType abnormalService;
};
struct EmergencyInfoList {
    int callSize;
    int flag;
    List<struct EmergencyCall> calls;
};
struct RilRadioResponseInfo {
    int slotId;
    int flag;
    int serial;
    enum RilErrType error;
    enum RilResponseTypes type;
};
struct SetupDataCallResultInfo {
    int flag;
    int reason;
    int retryTime;
    int cid;
    int active;
    int maxTransferUnit;
    int pduSessionId;
    String type;
    String netPortName;
    String address;
    String dns;
    String dnsSec;
    String gateway;
    String pCscfPrimAddr;
    String pCscfSecAddr;
};
struct DataCallResultList {
    int size;
    List<struct SetupDataCallResultInfo> dcList;
};
struct DataProfileDataInfo {
    int serial;
    int profileId;
    int authenticationType;
    String apn;
    String protocol;
    String roamingProtocol;
    String userName;
    String password;
};
struct DataProfilesInfo {
    int serial;
    int profilesSize;
    boolean isRoaming;
    List<struct DataProfileDataInfo> profiles;
};
struct DataCallInfo {
    int serial;
    int radioTechnology;
    boolean modemCognitive;
    boolean roamingAllowed;
    boolean isRoaming;
    struct DataProfileDataInfo dataProfileInfo;
};
struct DataLinkBandwidthInfo {
    int serial;
    int cid;
    int qi;
    int dlGfbr;
    int ulGfbr;
    int dlMfbr;
    int ulMfbr;
    int ulSambr;
    int dlSambr;
    int averagingWindow;
};
struct DataLinkBandwidthReportingRule {
    int serial;
    int rat;
    int delayMs;
    int delayUplinkKbps;
    int delayDownlinkKbps;
    int maximumUplinkKbpsSize;
    int maximumDownlinkKbpsSize;
    List<int> maximumUplinkKbps;
    List<int> maximumDownlinkKbps;
};
struct DataPerformanceInfo {
    int performanceEnable;
    int enforce;
};
struct DataSleepInfo {
    int sleepEnable;
};
struct UniInfo {
    int serial;
    int gsmIndex;
    boolean flag;
    int arg1;
    int arg2;
    String strTmp;
};
struct VoiceRadioTechnology {
  enum RilSrvStatus srvStatus;
  enum RilSrvDomain srvDomain;
  enum RilRoamStatus roamStatus;
  enum RilSimStatus simStatus;
  enum RilSimLockStatus lockStatus;
  enum RilSysMode sysMode;
  String sysModeName;
  enum RilRadioTech actType;
  String actName;
  int flag;
};
struct DialInfo {
    int serial;
    int clir;
    String address;
};
struct CallInfo {
    int index;
    int dir;
    int state;
    int mode;
    int mpty;
    int voiceDomain;
    int callType;
    int type;
    String number;
    String alpha;
};
struct CallInfoList {
    int callSize;
    int flag;
    List<struct CallInfo> calls;
};
struct GetClipResult {
    int result;
    int action;
    int clipStat;
};
struct GetClirResult {
    int result;
    int action;
    int clirStat;
};
struct CallWaitResult {
    int result;
    int status;
    int classCw;
};
struct CallRestrictionInfo {
    int mode;
    String fac;
    String password;
};
struct CallRestrictionResult {
    int result;
    int status;
    int classCw;
};
struct CallForwardSetInfo {
    int reason;
    int mode;
    int classx;
    String number;
};
struct CallForwardQueryResult {
    int serial;
    int result;
    int status;
    int classx;
    int type;
    int reason;
    int time;
    String number;
};
struct CallForwardQueryInfoList {
    int callSize;
    int flag;
    List<struct CallForwardQueryResult> calls;
};
struct UssdNoticeInfo {
    int type;
    String message;
};
struct SsNoticeInfo {
    int serviceType;
    int requestType;
    int serviceClass;
    int result;
};
struct SrvccStatus {
    int status;
};
struct RingbackVoice {
    int status;
};
struct DtmfInfo {
    int callId;
    int onLength;
    int offLength;
    int stringLength;
    String dtmfKey;
};
struct SetBarringInfo {
    String fac;
    String oldPassword;
    String newPassword;
};
struct CardStatusInfo {
    int index;
    int simType;
    int simState;
};
struct SimIoRequestInfo {
    int command;
    int fileId;
    int p1;
    int p2;
    int p3;
    int serial;
    String data;
    String path;
    String pin2;
    String aid;
};
struct IccIoResultInfo {
    int sw1;
    int sw2;
    String response;
};
struct SimLockInfo {
    int classx;
    int serial;
    String fac;
    int mode;
    int status;
    String passwd;
};
struct SimPasswordInfo {
    String fac;
    String oldPassword;
    String newPassword;
    int serial;
    int passwordLength;
};
struct SimPinInputTimes {
    int serial;
    int times;
    int pukTimes;
    int pinTimes;
    int puk2Times;
    int pin2Times;
    String code;
};
struct ApduSimIORequestInfo {
    int serial;
    int channelId;
    int type;
    int instruction;
    int p1;
    int p2;
    int p3;
    String data;
};
struct SimAuthenticationRequestInfo {
    int serial;
    String aid;
    String authData;
};
struct OpenLogicalChannelResponse {
    int sw1;
    int sw2;
    int channelId;
    String response;
};
struct LockStatusResp {
    int result;
    int remain;
};
struct RadioProtocol {
    int slotId;
    int sessionId;
    enum RadioProtocolPhase phase;
    int technology;
    int modemId;
    enum RadioProtocolStatus status;
};
struct GsmRssi {
    int rxlev;
    int ber;
};
struct CdmaRssi {
    int absoluteRssi;
    int ecno;
};
struct WcdmaRssi {
    int rxlev;
    int ecio;
    int rscp;
    int ber;
};
struct LteRssi {
    int rxlev;
    int rsrq;
    int rsrp;
    int snr;
};
struct TdScdmaRssi {
    int rscp;
};
struct NrRssi {
    int rsrp;
    int rsrq;
    int sinr;
};
struct Rssi {
    struct GsmRssi gw;
    struct CdmaRssi cdma;
    struct WcdmaRssi wcdma;
    struct LteRssi lte;
    struct TdScdmaRssi tdScdma;
    struct NrRssi nr;
};
struct CsRegStatusInfo {
    int notifyType;
    enum RilRegStatus regStatus;
    int lacCode;
    int cellId;
    enum RilRadioTech radioTechnology;
    int flag;
};
struct PsRegStatusInfo {
    int notifyType;
    enum RilRegStatus regStatus;
    int lacCode;
    int cellId;
    enum RilRadioTech radioTechnology;
    boolean isNrAvailable;
    boolean isEnDcAvailable;
    boolean isDcNrRestricted;
};
struct OperatorInfo {
    String longName;
    String shortName;
    String numeric;
};
struct AvailableNetworkInfo {
    String longName;
    String shortName;
    String numeric;
    int status;
    int rat;
};
struct AvailableNetworkList {
    int itemNum;
    List<struct AvailableNetworkInfo> availableNetworkInfo;
    int flag;
};
struct SetNetworkModeInfo {
    int selectMode;
    String oper;
    int flag;
};
struct CellListRatGsm {
    int band;
    int arfcn;
    int bsic;
    int cellId;
    int lac;
    int rxlev;
};
struct CellListRatLte {
    int arfcn;
    int pci;
    int rsrp;
    int rsrq;
    int rxlev;
};
struct CellListRatWcdma {
    int arfcn;
    int psc;
    int rscp;
    int ecno;
};
struct CellListRatCdma {
    int systemId;
    int networkId;
    int baseId;
    int zoneId;
    int pilotPn;
    int pilotStrength;
    int channel;
    int longitude;
    int latitude;
};
struct CellListRatTdscdma {
    int arfcn;
    int syncId;
    int sc;
    int cellId;
    int lac;
    int rscp;
    int drx;
    int rac;
    int cpid;
};
struct CellListRatNr {
    int nrArfcn;
    int pci;
    int tac;
    int nci;
};
union ServiceCellParas {
    struct CellListRatGsm gsm;
    struct CellListRatLte lte;
    struct CellListRatWcdma wcdma;
    struct CellListRatCdma cdma;
    struct CellListRatTdscdma tdscdma;
    struct CellListRatNr nr;
};
struct CellNearbyInfo {
    int ratType;
    union ServiceCellParas serviceCells;
};
struct CellListNearbyInfo {
    int itemNum;
    List<struct CellNearbyInfo> cellNearbyInfo;
};
struct CellRatGsm {
    int band;
    int arfcn;
    int bsic;
    int cellId;
    int lac;
    int rxlev;
    int rxQuality;
    int ta;
};
struct CellRatLte {
    int arfcn;
    int cellId;
    int pci;
    int tac;
    int rsrp;
    int rsrq;
    int rssi;
};
struct CellRatWcdma {
    int arfcn;
    int psc;
    int cellId;
    int lac;
    int rscp;
    int rxlev;
    int ecno;
    int drx;
    int ura;
};
struct CellRatCdma {
    int systemId;
    int networkId;
    int baseId;
    int zoneId;
    int pilotPn;
    int pilotStrength;
    int channel;
    int longitude;
    int latitude;
};
struct CellRatTdscdma {
    int arfcn;
    int syncId;
    int sc;
    int cellId;
    int lac;
    int rscp;
    int drx;
    int rac;
    int cpid;
};
struct CellRatNr {
    int nrArfcn;
    int pci;
    int tac;
    int nci;
};
union CurrentServiceCellParas {
    struct CellRatGsm gsm;
    struct CellRatLte lte;
    struct CellRatWcdma wcdma;
    struct CellRatCdma cdma;
    struct CellRatTdscdma tdscdma;
    struct CellRatNr nr;
};
struct CurrentCellInfo {
    int ratType;
    int mcc;
    int mnc;
    union CurrentServiceCellParas serviceCells;
};
struct CellListCurrentInfo {
    int itemNum;
    List<struct CurrentCellInfo> cellCurrentInfo;
};
struct PreferredNetworkTypeInfo {
    int preferredNetworkType;
    int flag;
};
struct PhysicalChannelConfig {
    enum RilCellConnectionStatus cellConnStatus;
    enum RilRadioTech ratType;
    int cellBandwidthDownlinkKhz;
    int cellBandwidthUplinkKhz;
    int freqRange;
    int downlinkChannelNum;
    int uplinkChannelNum;
    int physicalCellId;
    int contextIdNum;
    List<int> contextIds;
};
struct ChannelConfigInfoList {
    int itemNum;
    List<struct PhysicalChannelConfig> channelConfigInfos;
    int flag;
};
struct GsmSmsMessageInfo {
    int serial;
    int state;
    String smscPdu;
    String pdu;
};
struct SendCdmaSmsMessageInfo {
    int serial;
    int state;
    String smscPdu;
};
struct SmsMessageIOInfo {
    int serial;
    String smscPdu;
    String pdu;
    int state;
    int index;
};
struct ServiceCenterAddress {
    int serial;
    int tosca;
    String address;
};
struct CBConfigInfo {
    int serial;
    int mode;
    int indicationType;
    String mids;
    String dcss;
};
struct CdmaCBConfigInfo {
    int service;
    int language;
    int checked;
};
struct CdmaCBConfigInfoList {
    int serial;
    int size;
    List<struct CdmaCBConfigInfo> list;
};
struct CBConfigReportInfo {
    int indicationType;
    int sn;
    int mid;
    int page;
    int pages;
    int length;
    String data;
    String dcs;
    String pdu;
};
struct SmsMessageInfo {
    int indicationType;
    int size;
    List<unsigned char> pdu;
};
struct ModeData {
    int serial;
    boolean result;
    int mode;
    String pdu;
};
struct SendSmsResultInfo {
    int msgRef;
    String pdu;
    int errCode;
    int flag;
};
