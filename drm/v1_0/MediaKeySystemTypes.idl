/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @addtogroup HdiDrm
 * @
 * @brief Defines APIs of the Drm module.
 * The Drm module provides APIs for multimedia Drm.
 * @since 4.1
 * @version 1.0
 */

/**
 * @file MediaKeySystemTypes.idl
 *
 * @brief Defines the types used in HdiDrm.
 * @since 4.1
 * @version 1.0
 */


package ohos.hdi.drm.v1_0;

enum SecurityLevel {
    SECURE_UNKNOWN = 0,
    SW_SECURE_CRYPTO = 1,
    SW_SECURE_DECODE = 2,
    HW_SECURE_CRYPTO = 3,
    HW_SECURE_DECODE = 4,
    HW_SECURE_ALL = 5,
};

enum RequestType {
    REQUESTTYPE_UNKNOWN = 0,
    REQUEST_TYPE_INITIAL = 1,
    REQUEST_TYPE_RENEWAL = 2,
    REQUEST_TYPE_RELEASE = 3,
    REQUEST_TYPE_NONE = 4,
    REQUEST_TYPE_UPDATE = 5,
};

enum EventType {
    EVENTTYPE_PROVISIONREQUIRED = 1,
    EVENTTYPE_KEYNEEDED = 2,
    EVENTTYPE_KEYEXPIRED = 3,
    EVENTTYPE_VENDOR_DEFINED = 4,
    EVENTTYPE_KEYSESSION_RECLAIMED = 5,
    EVENTTYPE_EXPIRATIONUPDATE = 6,
    EVENTTYPE_KEYCHANGE = 7,
    EVENTTYPE_KEYSESSION_LOST = 8,

};

enum CryptoAlgorithmType {
    ALGTYPE_UNENCRYPTED = 0,
    ALGTYPE_AES_CTR = 1,
    ALGTYPE_AES_WV = 2,
    ALGTYPE_AES_CBC = 3,
    ALGTYPE_SM4_CBC = 4,
    ALGTYPE_SM4_CTR = 5,
};

enum OfflineLicenseStatus {
    OFFLINELICENSE_STATUS_UNKNOWN = 0,
    OFFLINELICENSE_STATUS_USABLE = 1,               
    OFFLINELICENSE_STATUS_INACTIVE = 2,
};

enum LicenseType {
    LICENSE_TYPE_ONLINE = 1,
    LICENSE_TYPE_OFFLINE = 2,
};

enum CertificateStatus {
    CERT_STATUS_PROVISIONED = 0,
    CERT_STATUS_NOT_PROVISIONED = 1,               
    CERT_STATUS_EXPIRED = 2,
    CERT_STATUS_INVALID = 3,
    CERT_STATUS_GET_FAILED = 4,
};

enum MediaKeySessionLicenseStatus {
    MEDIA_KEY_SESSION_LICENSE_STATUS_USABLE = 0,
    MEDIA_KEY_SESSION_LICENSE_STATUS_EXPIRED = 1,
    MEDIA_KEY_SESSION_LICENSE_STATUS_OUTPUT_NOT_ALLOWED =2,
    MEDIA_KEY_SESSION_LICENSE_STATUS_PENDING = 3,
    MEDIA_KEY_SESSION_LICENSE_STATUS_INTERNAL_ERROR = 4,
    MEDIA_KEY_SESSION_LICENSE_STATUS_USABLE_IN_FUTURE = 5,
};

struct LicenseStatusString {
    String name;
    String value;
};

struct LicenseRequestInfo {
    enum LicenseType licenseType;
    String mimeType;
    unsigned char[] initData;
    Map<String, String> optionalData;
};

struct LicenseRequest {
    enum RequestType requestType;
    unsigned char[] mData;
    String mDefaultUrl;
};

struct Pattern {
    unsigned int encryptBlocks;
    unsigned int skipBlocks;
};

struct SubSample {
    unsigned int clearHeaderLen;
    unsigned int payLoadLen;
};

struct CryptoInfo {
    enum CryptoAlgorithmType type;
    unsigned char[] keyId;
    unsigned char[] iv;
    struct Pattern pattern;
    struct SubSample[] subSamples;
};

struct DrmBuffer {
    unsigned int bufferType;
    unsigned int bufferLen;
    FileDescriptor fd;
};
