/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos.hdi.codec.v1_0;

import ohos.hdi.codec.v1_0.CodecTypes;
import ohos.hdi.codec.v1_0.ICodecCallback;

interface ICodecComponent {
    GetComponentVersion([out] struct CompVerInfo verInfo);
    SendCommand([in] unsigned int omxCommandType, [in] unsigned int param, [in] byte[] cmdData);
    GetParameter([in] unsigned int index, [in] byte[] inParamStruct, [out] byte[] outParamStruct);
    SetParameter([in] unsigned int index, [in] byte[] paramStruct);
    GetConfig([in] unsigned int index, [in] byte[] inCfgStruct, [out] byte[] outCfgStruct);
    SetConfig([in] unsigned int index, [in] byte[] cfgStruct);
    GetExtensionIndex([in] String paramName, [out] unsigned int indexType);
    GetState([out] unsigned int omxStateType);
    ComponentTunnelRequest([in] unsigned int port, [in] int tunneledComp, [in] unsigned int tunneledPort, [in] struct OMX_TUNNELSETUPTYPE inTunnelSetup, [out] struct OMX_TUNNELSETUPTYPE outTunnelSetup);
    UseBuffer([in] unsigned int portIndex, [in] struct OmxCodecBuffer inBuffer, [out] struct OmxCodecBuffer outBuffer);
    AllocateBuffer([in] unsigned int portIndex, [in] struct OmxCodecBuffer inBuffer, [out] struct OmxCodecBuffer outBuffer);
    FreeBuffer([in] unsigned int portIndex, [in] struct OmxCodecBuffer buffer);
    EmptyThisBuffer([in] struct OmxCodecBuffer buffer);
    FillThisBuffer([in] struct OmxCodecBuffer buffer);
    SetCallbacks([in] ICodecCallback callbacks, [in] long appData);
    ComponentDeInit();
    UseEglImage([in] unsigned int portIndex, [in] struct OmxCodecBuffer inBuffer, [out] struct OmxCodecBuffer outBuffer, [in] byte[] eglImage);
    ComponentRoleEnum([out] unsigned char[] role, [in] unsigned int index);
}