/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @addtogroup HdiAudio
 * @{
 *
 * @brief Provides unified APIs for audio services to access audio drivers.
 *
 * An audio service can obtain an audio driver object or agent and then call APIs provided by this object or agent to
 * access different types of audio devices based on the audio IDs, thereby obtaining audio information,
 * subscribing to or unsubscribing from audio data, enabling or disabling an audio,
 * setting the audio data reporting mode, and setting audio options such as the accuracy and measurement range.
 *
 * @since 4.1
 * @version 1.1
 */

package ohos.hdi.audio.v1_1;

/**
 * @brief Enumerates the pin of an audio adapter.
 */
enum AudioPortPin {
    PIN_NONE                     = 0,                 /**< Invalid pin */
    PIN_OUT_SPEAKER              = 1 << 0,            /**< Speaker output pin */
    PIN_OUT_HEADSET              = 1 << 1,            /**< Wired headset pin for output */
    PIN_OUT_LINEOUT              = 1 << 2,            /**< Line-out pin */
    PIN_OUT_HDMI                 = 1 << 3,            /**< HDMI output pin */
    PIN_OUT_USB                  = 1 << 4,            /**< USB output pin */
    PIN_OUT_USB_EXT              = 1 << 5,            /**< Extended USB output pin*/
    PIN_OUT_EARPIECE             = 1 << 5 | 1 << 4,   /**< Earpiece output pin */
    PIN_OUT_BLUETOOTH_SCO        = 1 << 6,            /**< Bluetooth SCO output pin */
    PIN_OUT_DAUDIO_DEFAULT       = 1 << 7,            /**< Daudio default output pin */
    PIN_OUT_HEADPHONE            = 1 << 8,            /**< Wired headphone output pin*/
    PIN_OUT_USB_HEADSET          = 1 << 9,            /**< ARM USB out pin */
    PIN_OUT_BLUETOOTH_A2DP       = 1 << 10,           /**< Bluetooth A2DP output pin */
    PIN_IN_MIC                   = 1 << 27 | 1 << 0,  /**< Microphone input pin */
    PIN_IN_HS_MIC                = 1 << 27 | 1 << 1,  /**< Wired headset microphone pin for input */
    PIN_IN_LINEIN                = 1 << 27 | 1 << 2,  /**< Line-in pin */
    PIN_IN_USB_EXT               = 1 << 27 | 1 << 3,  /**< Extended USB input pin*/
    PIN_IN_BLUETOOTH_SCO_HEADSET = 1 << 27 | 1 << 4,  /**< Bluetooth SCO headset input pin */
    PIN_IN_DAUDIO_DEFAULT        = 1 << 27 | 1 << 5,  /**< Daudio default input pin */
    PIN_IN_USB_HEADSET           = 1 << 27 | 1 << 6,  /**< ARM USB input pin */
};

/**
 * @brief Enumerates the audio category.
 */
enum AudioCategory {
    AUDIO_IN_MEDIA         = 0, /**< Media */
    AUDIO_IN_COMMUNICATION = 1, /**< Communications */
    AUDIO_IN_RINGTONE      = 2, /**< Ringtone */
    AUDIO_IN_CALL          = 3, /**< Call */
    AUDIO_MMAP_NOIRQ       = 4, /**< Mmap mode */
    AUDIO_OFFLOAD          = 5, /**< Offload */
    AUDIO_MULTI_CHANNEL    = 6, /**< Multi channel */
};

/**
 * @brief Enumerates the restricted key type of the parameters
 */
enum AudioExtParamKey {
    AUDIO_EXT_PARAM_KEY_NONE     = 0,    /**< Distributed audio extra param key none */
    AUDIO_EXT_PARAM_KEY_VOLUME   = 1,    /**< Distributed audio extra param key volume event */
    AUDIO_EXT_PARAM_KEY_FOCUS    = 2,    /**< Distributed audio extra param key focus event */
    AUDIO_EXT_PARAM_KEY_BUTTON   = 3,    /**< Distributed audio extra param key media button event */
    AUDIO_EXT_PARAM_KEY_EFFECT   = 4,    /**< Distributed audio extra param key audio effect event */
    AUDIO_EXT_PARAM_KEY_STATUS   = 5,    /**< Distributed audio extra param key device status event */
    AUDIO_EXT_PARAM_KEY_USB_DEVICE = 101, /**< Check USB device type ARM or HIFI */
    AUDIO_EXT_PARAM_KEY_PERF_INFO = 201, /**< Distributed audio extra param key dsp load event */
    AUDIO_EXT_PARAM_KEY_MMI      = 301,  /**< Distributed audio extra param key Man-Machine interface Test */
    AUDIO_EXT_PARAM_KEY_LOWPOWER = 1000, /**< Low power event type */
};

/**
 * @brief Defines audio input type.
 */
enum AudioInputType {
    AUDIO_INPUT_DEFAULT_TYPE             = 0,      /**< Assigned default input type */
    AUDIO_INPUT_MIC_TYPE                 = 1 << 0, /**< Assigned mic input type */
    AUDIO_INPUT_SPEECH_WAKEUP_TYPE       = 1 << 1, /**< Assigned speech wakeup input type */
    AUDIO_INPUT_VOICE_COMMUNICATION_TYPE = 1 << 2, /**< Assigned voice communication input type */
    AUDIO_INPUT_VOICE_RECOGNITION_TYPE   = 1 << 3, /**< Assigned voice recognition input type */
    AUDIO_INPUT_VOICE_UPLINK_TYPE        = 1 << 4, /**< Assigned voice uplink input type */
    AUDIO_INPUT_VOICE_DOWNLINK_TYPE      = 1 << 5, /**< Assigned voice downlink input type */
    AUDIO_INPUT_VOICE_CALL_TYPE          = 1 << 6, /**< Assigned voice call input type */
    AUDIO_INPUT_CAMCORDER_TYPE           = 1 << 7, /**< Assigned camcorder input type */
};

