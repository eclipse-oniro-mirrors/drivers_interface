/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2024. All rights reserved
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos.hdi.wlan.chip.v1_0;

enum WifiStatusCode : int{
    SUCCESS,
    ERROR_WIFI_CHIP_INVALID,
    ERROR_WIFI_IFACE_INVALID,
    ERROR_WIFI_RTT_CONTROLLER_INVALID,
    ERROR_NOT_SUPPORTED,
    ERROR_NOT_AVAILABLE,
    ERROR_NOT_STARTED,
    ERROR_INVALID_ARGS,
    ERROR_BUSY,
    ERROR_UNKNOWN
};

struct WifiStatus {
    WifiStatusCode code;
    String description;
};

enum IfaceType : unsigned int {
    STA,
    AP,
    P2P,
    NANIFACE,
};

struct ChipIfaceCombinationLimit {
    enum IfaceType[] types; //Each IfaceType must occur at most once.
    unsigned int maxIfaces;
};

struct ChipIfaceCombination {
    struct ChipIfaceCombinationLimit[] limits;
};

struct ChipMode {
    unsigned int id;
    struct ChipIfaceCombination[] availableCombinations;
};

enum WifiBand : unsigned int {
    BAND_UNSPECIFIED = 0,
    BAND_24GHZ = 1,
    BAND_5GHZ = 2,
    BAND_5GHZ_DFS = 4,
    BAND_5GHZ_WITH_DFS = 6,
    BAND_24GHZ_5GHZ = 3,/
    BAND_24GHZ_5GHZ_WITH_DFS = 7
};

enum ChipCapabilityMask : unsigned int {
    DEBUG_MEMORY_FIRMWARE_DUMP = 1 << 0,
    DEBUG_MEMORY_DRIVER_DUMP = 1 << 1,
    DEBUG_RING_BUFFER_CONNECT_EVENT = 1 << 2,
    DEBUG_RING_BUFFER_POWER_EVENT = 1 << 3,
    DEBUG_RING_BUFFER_WAKELOCK_EVENT = 1 << 4,
    DEBUG_RING_BUFFER_VENDOR_DATA = 1 << 5,
    DEBUG_HOST_WAKE_REASON_STATS = 1 << 6,
    DEBUG_ERROR_ALERTS = 1 << 7,
    SET_TX_POWER_LIMIT = 1 << 8,
    D2D_RTT = 1 << 9,
    D2AP_RTT = 1 << 10,
    USE_BODY_HEAD_SAR = 1 << 11,
    SET_LATENCY_MODE = 1 << 12,
    P2P_RAND_MAC = 1 << 13,
    WIGIG = 1 << 14
};

enum StaIfaceCapabilityMask : unsigned int {
    APF = 1 << 0,
    BACKGROUND_SCAN = 1 << 1,
    LINK_LAYER_STATS = 1 << 2,
    RSSI_MONITOR = 1 << 3,
    CONTROL_ROAMING = 1 << 4,
    PROBE_IE_WHITELIST = 1 << 5,
    SCAN_RAND = 1 << 6,
    STA_5G = 1 << 7,
    HOTSPOT = 1 << 8,
    PNO = 1 << 9,
    TDLS = 1 << 10,
    TDLS_OFFCHANNEL= 1 << 11,
    ND_OFFLOAD = 1 << 12,
    KEEP_ALIVE = 1 << 13,
    DEBUG_PACKET_FATE = 1 << 14
};