/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @addtogroup CHIP
 * @{
 *
 * @brief Provides APIs for the upper-layer WLAN service.
 *
 * You can use the APIs to manager the wifi chip, init and release the wifi chip, create and remove iface, register callback
 * get the name and type of the iface, get the support frequencies and set the mode of chip.
 *
 * @since 5.0
 * @version 1.0
 */

/**
 * @file ChipTypes.idl
 *
 * @brief Provides the enumerated variables, structures in CHIP APIs. 
 *
 * @since 5.0
 * @version 1.0
 */

/**
 * @brief Defines the package path of the chip module interface.
 *
 * @since 5.0
 * @version 1.0
 */

package ohos.hdi.wlan.chip.v1_0;

/**
 * @brief Enumerates the code of status.
 *
 * @since 5.0
 * @version 1.0
 */
enum ErrorCode : int{
    SUCCESS,
    INVALID_CHIP,
    INVALID_IFACE,
    UNSUPPORTED,
    UNAVAILABLE,
    NOT_INITED,
    UNKNOWN
};

/**
 * @brief Enumerates the types of the interface.
 *
 * @since 5.0
 * @version 1.0
 */
enum IfaceType : unsigned int {
    STA,
    AP,
    P2P,
    NANIFACE
};

/**
 * @brief Defines the limitations of the interface.
 *
 * @since 5.0
 * @version 1.0
 */
struct IfaceLimit {
    enum IfaceType[] types;
    unsigned int ifaceNum;
};

/**
 * @brief Defines the usable interface of the chip.
 *
 * @since 5.0
 * @version 1.0
 */
struct ComboIface {
    struct IfaceLimit[] limits;
};

/**
 * @brief Defines the usable mode of the chip.
 *
 * @since 5.0
 * @version 1.0
 */
struct UsableMode {
    unsigned int modeId;
    struct ComboIface[] usableCombo;
};

/**
 * @brief Enumerates the types of band.
 *
 * @since 5.0
 * @version 1.0
 */
enum BandType : unsigned int {
    UNSPECIFIED = 0,
    TYPE_24GHZ = 1,
    TYPE_5GHZ = 2,
    TYPE_24GHZ_AND_5GHZ = 3,
    TYPE_DFS = 4,
    TYPE_24GHZ_AND_DFS = 5,
    TYPE_5GHZ_AND_DFS = 6,
    ALL_BAND = 7
};
/** @} */