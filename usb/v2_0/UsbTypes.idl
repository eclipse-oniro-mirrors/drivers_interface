/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /**
 * @addtogroup HdiUsb
 * @
 *
 * @brief Provides unified APIs for usb services to access usb drivers.
 *
 * A usb service can obtain a usb driver object or agent and then call APIs provided by this object or agent to
 * access different types of usb devices based on the usb IDs, thereby obtaining usb information,
 * subscribing to or unsubscribing from usb data, enabling or disabling a usb,
 * setting the usb data reporting mode, and setting usb options such as the accuracy and measurement range.
 *
 * @since 5.1
 * @version 1.0
 */

/**
 * @file UsbTypes.idl
 *
 * @brief Defines the data used by the usb module, including the usb information,
 * and reported usb data.
 *
 * @since 5.1
 * @version 1.0
 */

package ohos.hdi.usb.v2_0;

/**
 * @brief Defines the ControlTransfer Params, which is used by {@link IUsbHostInterface::ControlTransferReadwithLength}.
 * @since 5.1
 * @version 1.0
 */
struct UsbCtrlTransferParams {
    int requestType;
    int requestCmd;
    int value;
    int index;
    int length;
    int timeout;
};

/**
 * @brief Defines the UsbDev Params.
 * @since 5.1
 * @version 1.0
 */
struct UsbDev {
    unsigned char busNum;
    unsigned char devAddr;
};

/**
 * @brief Defines the UsbPipe Params.
 * @since 5.1
 * @version 1.0
 */
struct UsbPipe {
    unsigned char intfId;
    unsigned char endpointId;
};

/**
 * @brief Defines the UsbCtrlTransfer Params.
 * @since 5.1
 * @version 1.0
 */
struct UsbCtrlTransfer {
    int requestType;
    int requestCmd;
    int value;
    int index;
    int timeout;
};

/**
 * @brief Defines the USBDeviceInfo Params.
 * @since 5.1
 * @version 1.0
 */
struct USBDeviceInfo {
    int status;
    int busNum;
    int devNum;
};

/**
 * @brief Defines the RoleCombinations Params.
 * @since 5.1
 * @version 1.0
 */
struct RoleCombinations {
    int powerRole;
    int dataRole;
};

/**
 * @brief Defines the PortInfo Params.
 * @since 5.1
 * @version 1.0
 */
struct PortInfo {
    int portId;
    int powerRole;
    int dataRole;
    int mode;
};

/**
 * @brief Defines the UsbPortStatus Params.
 * @since 5.1
 * @version 1.0
 */
struct UsbPortStatus {
    int currentMode;
    int currentPowerRole;
    int currentDataRole;
    int isConnected;
    RoleCombinations[] supportedRoleCombinations;
};

/**
 * @brief Defines the UsbPort Params.
 * @since 5.1
 * @version 1.0
 */
struct UsbPort {
    int id;
    int supportedModes;
    UsbPortStatus usbPortStatus;
};

/**
 * @brief Defines the USB iso packet descriptor params.
 * @since 5.1
 * @version 1.0
 */
struct UsbIsoPacketDescriptor {
    int isoLength;
    int isoActualLength;
    int isoStatus;
};

/**
 * @brief Defines the USB transferInfo Params.
 * @since 5.1
 * @version 1.0
 */
struct USBTransferInfo {
    int endpoint;
    int flags;
    int type;
    int timeOut;
    int length;
    unsigned long userData;
    unsigned int numIsoPackets;
};
