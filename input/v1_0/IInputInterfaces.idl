/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @addtogroup HdiInput
 * @{
 *
 * @brief Provides driver interfaces for the input service.
 *
 * These driver interfaces can be used to open and close input device files, get input events, query device information,
 * register callback functions, and control the feature status.
 *
 * @version 1.0
 */

package ohos.hdi.input.v1_0;

import ohos.hdi.input.v1_0.IInputCallback;
import ohos.hdi.input.v1_0.InputTypes;

interface IInputInterfaces {
    /**
     * @brief Scans all online input devices.
     *
     * @param staArr Indicates the pointer to the array storing information about the scanned input devices,
     * including the device index and device type.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    ScanInputDevice([out] struct DevDesc[] staArr);

    /**
     * @brief Opens a specified input device file.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    OpenInputDevice([in] unsigned int devIndex);

    /**
     * @brief Closes a specified input device file.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    CloseInputDevice([in] unsigned int devIndex);

    /**
     * @brief Gets information about a specified input device.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param devInfo Indicates the double pointer to information about the specified device.
     * For details, see {@link DeviceInfo}.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    GetInputDevice([in] unsigned int devIndex, [out] struct DeviceInfo devInfo);

    /**
     * @brief Gets information about all input devices in the device list.
     *
     * @param devNum Indicates the pointer to the total number of input devices which have been registered.
     * @param devList Indicates the double pointer to information about all devices in the device list.
     * For details, see {@link DeviceInfo}.
     * @param size Indicates the number of elements in the <b>devList</b> array.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    GetInputDeviceList([in] unsigned int devNum, [out] struct DeviceInfo[] devList, [in]unsigned int size);

    /**
     * @brief Sets the power status.
     *
     * This function is called only when the power status of the OS is changed. \n
     * The input service or the power management module can call this function to set the power status
     * for the input device when the OS is in the Resume or Suspend status, so that the driver integrated circuit (IC)
     * of the device can normally enter the specified status.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param status Indicates the power status to set. The input service will notify the input device of entering the
     * Resume or Suspend state specified by {@link PowerStatus}.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    SetPowerStatus([in] unsigned int devIndex, [in] unsigned int status);

    /**
     * @brief Gets the power status.
     *
     * The input service or the power management module can get the power status for the input device when the OS
     * is in the Resume or Suspend status, so that the driver IC of the device can normally enter the specified status.
     * You can call this function to obtain the power status.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param status Indicates the pointer to the power status of the device. For details, see {@link PowerStatus}.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    GetPowerStatus([in] unsigned int devIndex, [out] unsigned int status);

    /**
     * @brief Gets the type of the input device based on the specified device index.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param deviceType Indicates the pointer to the device type. For details, see {@link InputDevType}.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined
     * in {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    GetDeviceType([in] unsigned int devIndex, [out] unsigned int deviceType);

    /**
     * @brief Gets the chip information of the specified device.
     *
     * A product is usually equipped with modules and driver ICs provided by multiple vendors. An input service
     * can call this function to get the specific information if needed.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param chipInfo Indicates the pointer to the chip information.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined
     * in {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    GetChipInfo([in] unsigned int devIndex, [out] String chipInfo);

    /**
     * @brief Gets the module vendor name of the specified device.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param vendorName Indicates the pointer to the module vendor name.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined
     * in {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    GetVendorName([in] unsigned int devIndex, [out] String vendorName);

    /**
     * @brief Gets the driver chip name of the specified device.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param chipName Indicates the pointer to the driver chip name.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined
     * in {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    GetChipName([in] unsigned int devIndex, [out] String chipName);

    /**
     * @brief Sets the gesture mode.
     *
     * The input service can use this function to enable or disable the gesture mode by setting <b>EnableBit</b>
     * of the gesture mode.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param gestureMode Indicates the gesture mode to set.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined
     * in {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    SetGestureMode([in] unsigned int devIndex, [in] unsigned int gestureMode);

    /**
     * @brief Conducts a capacitance self-test.
     *
     * The capacitance self-test items are defined by the component vendor, such as the tests on the raw data,
     * short circuit, open circuit, interference, and row/column difference.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param testType Indicates the capacitance test type. For details, see {@link CapacitanceTest}.
     * @param result Indicates the pointer to the capacitance test result. The value is <b>SUCC</b> for a successful
     * operation and is an error code for a failed operation.
     * @param length Indicates the length of the test result. The minimum value of length is 20.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined
     * in {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    RunCapacitanceTest([in] unsigned int devIndex, [in] unsigned int testType, [out] String result, [in] unsigned int length);

    /**
     * @brief Executes the extra command.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param cmd Indicates the pointer to the extra command data packet, including the command codes and parameters.
     * For details, see {@link InputExtraCmd}.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined
     * in {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    RunExtraCommand([in] unsigned int devIndex, [in] struct ExtraCmd cmd);

    /**
     * @brief Register a callback for reporting subscribed data of specified input devices.
     *
     * After this callback is successfully registered, the driver can report the input event data to the input service
     * through this callback.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @param callback Indicates the pointer to the callback to register.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    RegisterReportCallback([in] unsigned int devIndex, [in] IInputCallback eventPkgCallback);

    /**
     * @brief Unregister the callback for reporting subscribed data of specified input devices.
     *
     * @param devIndex Indicates the index of an input device. A maximum of 32 input devices are supported.
     * The value ranges from 0 to 31, and value <b>0</b> represents the first input device.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    UnregisterReportCallback([in] unsigned int devIndex);

    /**
     * @brief Register a hot plug callback to the HDIs for input devices.
     *
     * All input devices can use this callback to report hot plug events.
     *
     * @param callback Indicates the pointer to the callback to register.
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    RegisterHotPlugCallback([in] IInputCallback hotPlugCallback);

    /**
     * @brief Unregister the hot plug callback of input devices.
     *
     * @return Returns <b>0</b> if the operation is successful; returns an error code defined in
     * {@link RetStatus} otherwise.
     * @since 3.2
     * @version 1.0
     */
    UnregisterHotPlugCallback();
}